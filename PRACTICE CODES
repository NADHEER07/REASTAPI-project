-Controller
1.MessageController
package com.rest.springapp.Controller;
package com.rest.springapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.rest.springapp.model.Message;
import com.rest.springapp.service.MessageService;

@RestController
public class MessageController {
    @Autowired
    MessageService obj;
    @PostMapping("/postdata")
    public ResponseEntity<Message> addMessage(@RequestBody Message a)
    {
        return new ResponseEntity<>(obj.add(a),HttpStatus.ACCEPTED);
    }

    @GetMapping("/messages")
    public ResponseEntity<List<Message>> getAllMessages() {
        return new ResponseEntity<>(obj.getAllMessages(), HttpStatus.OK);
    }

    @GetMapping("/messages/{id}")
    public ResponseEntity<Message> getMessageById(@PathVariable int id) {
        return obj.getMessageById(id)
                  .map(message -> new ResponseEntity<>(message, HttpStatus.OK))
                  .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PutMapping("/messages/{id}")
    public ResponseEntity<Message> updateMessage(@PathVariable int id, @RequestBody Message newMessage) {
        try {
            return new ResponseEntity<>(obj.updateMessage(id, newMessage), HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/messages/{id}")
    public ResponseEntity<Void> deleteMessage(@PathVariable int id) {
        try {
            obj.deleteMessage(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

}

-Entity
1.Message.java
package com.rest.springapp.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class Message {
    @Id
    private int id;
    private String text;
    private String details;
    

    // Constructor
    public Message(int id, String text, String details) {
        this.id = id;
        this.text = text;
        this.details = details;
        
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public Message() {
    }
}

-Repository
1.MessageRepository
package com.rest.springapp.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.rest.springapp.model.Message;

@Repository
public interface MessageRepo extends JpaRepository<Message,Integer>{

}

-Service
1.MessageService
package com.rest.springapp.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rest.springapp.model.Message;
import com.rest.springapp.repository.MessageRepo;

@Service
public class MessageService {
    @Autowired
    MessageRepo obj;
    public Message add(Message a)
    {
        return obj.save(a);
    }

    public List<Message> getAllMessages() {
        return obj.findAll();
    }

    public Optional<Message> getMessageById(int id) {
        return obj.findById(id);
    }

    public Message updateMessage(int id, Message newMessage) {
        return obj.findById(id).map(existingMessage -> {
            existingMessage.setText(newMessage.getText());
            existingMessage.setDetails(newMessage.getDetails());
            return obj.save(existingMessage);
        }).orElseThrow(() -> new RuntimeException("Message not found with id " + id));
    }

    public void deleteMessage(int id)
     {
        if (obj.existsById(id))
         {
            obj.deleteById(id);
        } 
        else 
        {
            throw new RuntimeException("Message not found with id " + id);
        }
    }

}


